/*
Cleaning Data in SQL Queries
*/

SELECT *
FROM PortfolioProject.dbo.NashvilleHousing

--------------------------------------------------------------------------------------------------------------------------
-- Standardize SaleDate column's date format

SELECT SaleDate, CONVERT(date,SaleDate)
FROM PortfolioProject.dbo.NashvilleHousing

UPDATE PortfolioProject.dbo.NashvilleHousing
SET SaleDate = CONVERT(date,SaleDate)

--Not updating the existing column Saledate

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
ADD SaleDateConverted Date --Creating a new column named SaleDateConverted

UPDATE PortfolioProject.dbo.NashvilleHousing
SET SaleDateConverted = CONVERT(date,SaleDate) --Populating it with cleaned / converted data

--------------------------------------------------------------------------------------------------------------------------
--Populating PropertyAddress data

SELECT PropertyAddress
FROM PortfolioProject.dbo.NashvilleHousing
WHERE PropertyAddress IS NULL

--Numerous NULL values
SELECT *
FROM PortfolioProject.dbo.NashvilleHousing
ORDER BY ParcelID

--Noticed that ParcelIDs correspond to distinct PropertyAddress's
SELECT *
FROM PortfolioProject.dbo.NashvilleHousing
ORDER BY ParcelID

--Populating the PropertyAddress NULL values with a SELF JOIN

SELECT nh1.UniqueID, nh1.PropertyAddress, nh2.UniqueID, nh2.PropertyAddress, ISNULL(nh1.PropertyAddress, nh2.PropertyAddress) --if PropertyAddress in the nh1 table is null, then use the value from nh2
FROM PortfolioProject.dbo.NashvilleHousing nh1
JOIN PortfolioProject.dbo.NashvilleHousing nh2
  ON nh1.ParcelID = nh2.ParcelID
  AND nh1.[UniqueID ] <> nh2.[UniqueID ]
WHERE nh1.PropertyAddress IS NULL

UPDATE nh1
SET PropertyAddress = ISNULL(nh1.PropertyAddress, nh2.PropertyAddress)
FROM PortfolioProject.dbo.NashvilleHousing nh1
JOIN PortfolioProject.dbo.NashvilleHousing nh2
  ON nh1.ParcelID = nh2.ParcelID
  AND nh1.[UniqueID ] <> nh2.[UniqueID ]
WHERE nh1.PropertyAddress IS NULL

--------------------------------------------------------------------------------------------------------------------------
-- Breaking out Address into Individual Columns (Address, City, State)
SELECT 
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1) AS Address
, SUBSTRING(PropertyAddress,CHARINDEX(',',PropertyAddress)+1,LEN(PropertyAddress)) AS City
FROM PortfolioProject.dbo.NashvilleHousing

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
ADD PropertySplitAddress nvarchar(255); --Creating a new column for Split Address

UPDATE PortfolioProject.dbo.NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1)

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
ADD PropertySplitCity nvarchar(255); --Creating a new column for Split City

UPDATE PortfolioProject.dbo.NashvilleHousing
SET PropertySplitCity = SUBSTRING(PropertyAddress,CHARINDEX(',',PropertyAddress)+1,LEN(PropertyAddress))

--Focusing on OwnerAddress values
SELECT OwnerAddress
FROM PortfolioProject.dbo.NashvilleHousing

--Splitting OwnerAddress into Address, City, State
SELECT
PARSENAME(REPLACE(OwnerAddress,',','.'),1)
,PARSENAME(REPLACE(OwnerAddress,',','.'),2)
,PARSENAME(REPLACE(OwnerAddress,',','.'),3)
FROM PortfolioProject.dbo.NashvilleHousing

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
ADD OwnerSplitAddress nvarchar(255)--Creating a new column for Owner Split Address

UPDATE PortfolioProject.dbo.NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress,',','.'),3)

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
ADD OwnerSplitCity nvarchar(255); --Creating a new column for Owner Split City

UPDATE PortfolioProject.dbo.NashvilleHousing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress,',','.'),2)

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
ADD OwnerSplitState nvarchar(255); --Creating a new column for Owner Split State

UPDATE PortfolioProject.dbo.NashvilleHousing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress,',','.'),1)

--Checking if the UPDATE worked
SELECT *
FROM PortfolioProject.dbo.NashvilleHousing --OK


--------------------------------------------------------------------------------------------------------------------------
--Change Y and N to Yes and NO in SoldAsVacant
SELECT DISTINCT(SoldAsVacant)
FROM PortfolioProject.dbo.NashvilleHousing

--There are 4 distinct values N, Yes, Y, No

--Trying a CASE statement with SELECT statement to check if it works
SELECT SoldAsVacant,
  CASE
    WHEN SoldAsVacant = 'N' THEN 'No'
	WHEN SoldAsVacant = 'Y' THEN 'Yes'
	ELSE SoldAsVacant
  END AS SoldAsVacantFix
FROM PortfolioProject.dbo.NashvilleHousing

--Updating the existing table
UPDATE PortfolioProject.dbo.NashvilleHousing
SET SoldAsVacant =
  CASE
    WHEN SoldAsVacant = 'N' THEN 'No'
	WHEN SoldAsVacant = 'Y' THEN 'Yes'
	ELSE SoldAsVacant
  END

--Checking if it worked
SELECT DISTINCT(SoldAsVacant)
FROM PortfolioProject.dbo.NashvilleHousing
--SUCCESS

-----------------------------------------------------------------------------------------------------------------------------------------------------------

-- Remove Duplicates
-- 1) Run Window functions (PARTITION BY) to find duplicate values
-- 2) Create a CTE
SELECT *,
  ROW_NUMBER() OVER(
    PARTITION BY ParcelID,
				 LegalReference,
				 SalePrice,
				 Acreage,
				 LandValue
				 ORDER BY
				   UniqueID
				   ) row_number
FROM PortfolioProject.dbo.NashvilleHousing

--Looking for row_number with value '2'
--Cannot use the WHERE statement -> USING CTE
WITH CTE_RowNumber AS(
SELECT *,
  ROW_NUMBER() OVER(
    PARTITION BY ParcelID,
				 LegalReference,
				 SalePrice,
				 Acreage,
				 LandValue
				 ORDER BY
				   UniqueID
				   ) row_number
FROM PortfolioProject.dbo.NashvilleHousing
)
SELECT *
FROM CTE_RowNumber
WHERE row_number > 1

--There are 123 duplicate rows

---------------------------------------------------------------------------------------------------------
--Deleting unused columns

SELECT *
FROM PortfolioProject.dbo.NashvilleHousing

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
DROP COLUMN SaleDate, OwnerAddress, PropertyAddress, TaxDistrict

